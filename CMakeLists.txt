cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
project(RESPACK NONE)

if(CONFIG)    
  message(STATUS "Loading configration: " ${PROJECT_SOURCE_DIR}/config/${CONFIG}.cmake)
  include(${PROJECT_SOURCE_DIR}/config/${CONFIG}.cmake)
endif(CONFIG)
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Type of build" FORCE)
endif(NOT CMAKE_BUILD_TYPE)
message(STATUS "Build type: " ${CMAKE_BUILD_TYPE})

option(BUILD_SHARED_LIBS "Build shared libraries" ON)
option(ENABLE_MPI "Enable MPI Parallelization" ON)
enable_language(Fortran)

set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
set(CMAKE_MACOSX_RPATH 1)

option(DEBUG "Debug" OFF)

find_package(LAPACK)

if(CMAKE_Fortran_COMPILER_ID STREQUAL "Intel")
  if("${CMAKE_Fortran_COMPILER_VERSION}" VERSION_LESS "15.0.0.20140528")
     set(OMP_FLAG_Intel "-openmp")
  else()
     set(OMP_FLAG_Intel "-qopenmp")
  endif()
  set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${OMP_FLAG_Intel}")
else()
  find_package(OpenMP)
  if(OPENMP_FOUND)
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${OpenMP_Fortran_FLAGS}")
  endif(OPENMP_FOUND)
endif()


if(ENABLE_MPI)
  find_package(MPI)
endif(ENABLE_MPI)
enable_testing()
option(Testing "Enable testing" ON)

if(ENABLE_MPI)
  find_package(MPI)
  if(MPI_FOUND)
    include_directories(${MPI_Fortran_INCLUDE_PATH})
    add_definitions(-DMPI)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MPI_Fortran_LINK_FLAGS}")
  endif(MPI_FOUND)
endif(ENABLE_MPI)

add_subdirectory(src)
